import { NextRequest, NextResponse } from 'next/server';
import type { CloudflareAI } from '@/types/cloudflare';

interface GenerateContentRequest {
  contentType: 'blog_post' | 'social_media' | 'marketing_copy' | 'email_campaign' | 'product_description';
  topic: string;
  tone?: 'professional' | 'casual' | 'friendly' | 'authoritative' | 'conversational';
  length?: 'short' | 'medium' | 'long';
  keywords?: string[];
  userId?: string;
}

interface AnalyzeContentRequest {
  content: string;
  analysisType?: 'tone' | 'seo' | 'readability' | 'engagement' | 'all';
  userId?: string;
}

interface ImproveContentRequest {
  content: string;
  improvements: string[];
  userId?: string;
}

// Generate new content
export async function POST(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action');

    if (action === 'generate') {
      const body: GenerateContentRequest = await request.json();

      if (!body.contentType || !body.topic) {
        return NextResponse.json(
          { error: 'Content type and topic are required' },
          { status: 400 }
        );
      }

      // Check if we're running in Cloudflare Workers environment with AI binding
      const AI = (globalThis as { AI?: CloudflareAI }).AI;
      
      if (AI) {
        try {
          // Create a specialized prompt based on content type
          const prompts = {
            blog_post: `Write a comprehensive blog post about "${body.topic}". Include an engaging introduction, main content sections, and a conclusion. Tone: ${body.tone || 'professional'}. Length: ${body.length || 'medium'}.`,
            social_media: `Create an engaging social media post about "${body.topic}". Make it shareable and include relevant hashtags. Tone: ${body.tone || 'friendly'}. Keep it concise and engaging.`,
            marketing_copy: `Write persuasive marketing copy for "${body.topic}". Focus on benefits, include a clear call-to-action, and make it conversion-focused. Tone: ${body.tone || 'professional'}.`,
            email_campaign: `Create an email campaign about "${body.topic}". Include a compelling subject line and body content. Tone: ${body.tone || 'professional'}. Make it personalized and action-oriented.`,
            product_description: `Write a detailed product description for "${body.topic}". Highlight key features, benefits, and specifications. Tone: ${body.tone || 'professional'}. Focus on conversion and clarity.`
          };

          const aiResponse = await AI.run('@cf/meta/llama-3.1-8b-instruct', {
            messages: [
              { role: 'system', content: 'You are a professional content writer. Create high-quality, engaging content based on the user\'s requirements.' },
              { role: 'user', content: prompts[body.contentType] }
            ],
            max_tokens: body.length === 'short' ? 500 : body.length === 'long' ? 2000 : 1000,
            temperature: 0.7
          });

          const content = aiResponse.response || aiResponse.content || 'AI-generated content';
          
          return NextResponse.json({
            success: true,
            content,
            metadata: {
              contentType: body.contentType,
              topic: body.topic,
              tone: body.tone || 'professional',
              length: body.length || 'medium',
              wordCount: content.split(/\s+/).length,
              generatedAt: new Date().toISOString()
            },
            usage: {
              tokensUsed: aiResponse.usage?.total_tokens || 500,
              cost: (aiResponse.usage?.total_tokens || 500) * 0.000001 // Approximate Cloudflare AI pricing
            }
          });
        } catch (aiError) {
          console.error('AI Content Generation Error:', aiError);
          // Fall back to template if AI fails
        }
      }

      // Fallback templates for development or when AI is not available
      const contentTemplates = {
        blog_post: `# ${body.topic}\n\nThis is a sample blog post about ${body.topic}. In production, this would be generated by Llama 3.1 based on your specific requirements.\n\n## Introduction\n\nWrite an engaging introduction here...\n\n## Main Content\n\nDetailed content about ${body.topic}...\n\n## Conclusion\n\nWrap up with key takeaways...`,
        social_media: `ðŸš€ Exciting news about ${body.topic}! \n\nThis would be a compelling social media post generated by AI, tailored to your brand voice and optimized for engagement.\n\n#${body.topic.replace(/\s+/g, '')} #Innovation #ContentCreation`,
        marketing_copy: `Transform Your Business with ${body.topic}\n\nDiscover how ${body.topic} can revolutionize your approach and drive real results. This persuasive copy would be crafted by AI to convert readers into customers.\n\nâœ… Benefit 1\nâœ… Benefit 2\nâœ… Benefit 3\n\nReady to get started? Contact us today!`,
        email_campaign: `Subject: Don't Miss Out on ${body.topic}\n\nHi [Name],\n\nThis email about ${body.topic} would be personalized and optimized for your audience. The AI would craft compelling subject lines, engaging content, and clear calls-to-action.\n\nBest regards,\n[Your Name]`,
        product_description: `${body.topic} - Premium Quality Product\n\nThis detailed product description would highlight key features, benefits, and specifications of ${body.topic}. The AI would focus on conversion-optimized copy that helps customers make purchasing decisions.\n\nKey Features:\nâ€¢ Feature 1\nâ€¢ Feature 2\nâ€¢ Feature 3`
      };

      return NextResponse.json({
        success: true,
        content: contentTemplates[body.contentType],
        metadata: {
          contentType: body.contentType,
          topic: body.topic,
          tone: body.tone || 'professional',
          length: body.length || 'medium',
          wordCount: Math.floor(Math.random() * 300) + 200,
          generatedAt: new Date().toISOString()
        },
        usage: {
          tokensUsed: Math.floor(Math.random() * 500) + 200,
          cost: 0.001 // Placeholder cost
        }
      });
    }

    if (action === 'analyze') {
      const body: AnalyzeContentRequest = await request.json();

      if (!body.content) {
        return NextResponse.json(
          { error: 'Content is required for analysis' },
          { status: 400 }
        );
      }

      // Placeholder analysis response
      return NextResponse.json({
        success: true,
        analysis: {
          tone: {
            primary: 'Professional',
            confidence: 0.85,
            suggestions: ['Consider adding more conversational elements to improve engagement']
          },
          readability: {
            score: 78,
            grade: 'College level',
            suggestions: ['Use shorter sentences', 'Replace complex words with simpler alternatives']
          },
          seo: {
            score: 72,
            suggestions: [
              'Add more relevant keywords',
              'Include meta description',
              'Optimize heading structure'
            ]
          },
          engagement: {
            score: 65,
            suggestions: [
              'Add more questions to engage readers',
              'Include call-to-action buttons',
              'Use more compelling headlines'
            ]
          }
        },
        wordCount: body.content.split(' ').length,
        analyzedAt: new Date().toISOString()
      });
    }

    if (action === 'improve') {
      const body: ImproveContentRequest = await request.json();

      if (!body.content || !body.improvements) {
        return NextResponse.json(
          { error: 'Content and improvements list are required' },
          { status: 400 }
        );
      }

      // Placeholder improved content
      return NextResponse.json({
        success: true,
        improvedContent: `${body.content}\n\n[This content has been improved based on your requirements: ${body.improvements.join(', ')}. In production, Llama 3.1 would rewrite this content with the specified improvements.]`,
        improvements: body.improvements,
        changes: [
          'Enhanced clarity and readability',
          'Improved SEO optimization',
          'Strengthened call-to-action',
          'Added engaging elements'
        ],
        improvedAt: new Date().toISOString()
      });
    }

    return NextResponse.json(
      { error: 'Invalid action. Use generate, analyze, or improve' },
      { status: 400 }
    );
  } catch (error) {
    console.error('Content API Error:', error);
    return NextResponse.json(
      { error: 'Failed to process content request' },
      { status: 500 }
    );
  }
}

// Get content suggestions
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const contentType = searchParams.get('contentType');
    const topic = searchParams.get('topic');

    if (!contentType || !topic) {
      return NextResponse.json(
        { error: 'Content type and topic are required' },
        { status: 400 }
      );
    }

    // Placeholder suggestions
    const suggestions = [
      `"10 Essential Tips for ${topic}"`,
      `"The Ultimate Guide to ${topic}"`,
      `"How ${topic} Can Transform Your Business"`,
      `"Common Mistakes to Avoid with ${topic}"`,
      `"The Future of ${topic}: Trends and Predictions"`
    ];

    return NextResponse.json({
      suggestions,
      contentType,
      topic,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('Content Suggestions API Error:', error);
    return NextResponse.json(
      { error: 'Failed to generate suggestions' },
      { status: 500 }
    );
  }
}
